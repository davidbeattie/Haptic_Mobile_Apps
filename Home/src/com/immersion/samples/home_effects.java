package com.immersion.samples;

/*
	How to use:

		// Create and open a device to play effects
		// This should be done only once per application

		Device device = Device.newDevice();

		// Create an IVT buffer with the exported effect definitions

		IVTBuffer ivtBuffer = new IVTBuffer(home_effects.ivt);

		// Play one of the effect defined in the IVTBuffer

		device.playIVTEffect(ivtBuffer, home_effects.Menu_onClick);

		// When the device is not needed anymore,
		// it must be closed to avoid resource leak

		device.close();

		// For more details, refer to the ImmVibe API Reference.

*/

public class home_effects
{
	public static final int Menu_onClick = 0;

	public static final int Menu_onClick_2 = 1;

	public static final int Scroll_Through = 2;

	public static final int Scroll_Ends = 3;

	public static final int Item_Click = 4;

	public static final byte[] ivt = 
	{
		(byte)0x01, (byte)0x00, (byte)0x05, (byte)0x00, (byte)0x5a, (byte)0x00, (byte)0x8e, (byte)0x00,
		(byte)0x00, (byte)0x00, (byte)0x10, (byte)0x00, (byte)0x20, (byte)0x00, (byte)0x30, (byte)0x00,
		(byte)0x40, (byte)0x00, (byte)0x30, (byte)0x14, (byte)0x00, (byte)0x18, (byte)0x01, (byte)0x7f,
		(byte)0x00, (byte)0x00, (byte)0x20, (byte)0x12, (byte)0x00, (byte)0x00, (byte)0x13, (byte)0x01,
		(byte)0x96, (byte)0xc1, (byte)0x30, (byte)0x18, (byte)0x01, (byte)0x14, (byte)0x00, (byte)0x00,
		(byte)0x7f, (byte)0x00, (byte)0x20, (byte)0x12, (byte)0x00, (byte)0x00, (byte)0x13, (byte)0x01,
		(byte)0x96, (byte)0xc1, (byte)0x30, (byte)0x00, (byte)0x00, (byte)0x01, (byte)0x00, (byte)0x00,
		(byte)0x00, (byte)0x00, (byte)0x20, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x40, (byte)0x00,
		(byte)0x00, (byte)0xa1, (byte)0x30, (byte)0x44, (byte)0x00, (byte)0x83, (byte)0x00, (byte)0x59,
		(byte)0x00, (byte)0x00, (byte)0x20, (byte)0x0c, (byte)0x00, (byte)0x00, (byte)0x17, (byte)0x00,
		(byte)0x00, (byte)0x81, (byte)0x30, (byte)0x0b, (byte)0x00, (byte)0x3f, (byte)0x00, (byte)0x73,
		(byte)0x00, (byte)0x00, (byte)0x20, (byte)0x04, (byte)0x00, (byte)0x00, (byte)0x21, (byte)0x00,
		(byte)0x00, (byte)0xb1, (byte)0x00, (byte)0x00, (byte)0x1a, (byte)0x00, (byte)0x38, (byte)0x00,
		(byte)0x56, (byte)0x00, (byte)0x6e, (byte)0x00, (byte)0x4d, (byte)0x00, (byte)0x65, (byte)0x00,
		(byte)0x6e, (byte)0x00, (byte)0x75, (byte)0x00, (byte)0x20, (byte)0x00, (byte)0x6f, (byte)0x00,
		(byte)0x6e, (byte)0x00, (byte)0x43, (byte)0x00, (byte)0x6c, (byte)0x00, (byte)0x69, (byte)0x00,
		(byte)0x63, (byte)0x00, (byte)0x6b, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x4d, (byte)0x00,
		(byte)0x65, (byte)0x00, (byte)0x6e, (byte)0x00, (byte)0x75, (byte)0x00, (byte)0x20, (byte)0x00,
		(byte)0x6f, (byte)0x00, (byte)0x6e, (byte)0x00, (byte)0x43, (byte)0x00, (byte)0x6c, (byte)0x00,
		(byte)0x69, (byte)0x00, (byte)0x63, (byte)0x00, (byte)0x6b, (byte)0x00, (byte)0x20, (byte)0x00,
		(byte)0x32, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x53, (byte)0x00, (byte)0x63, (byte)0x00,
		(byte)0x72, (byte)0x00, (byte)0x6f, (byte)0x00, (byte)0x6c, (byte)0x00, (byte)0x6c, (byte)0x00,
		(byte)0x20, (byte)0x00, (byte)0x54, (byte)0x00, (byte)0x68, (byte)0x00, (byte)0x72, (byte)0x00,
		(byte)0x6f, (byte)0x00, (byte)0x75, (byte)0x00, (byte)0x67, (byte)0x00, (byte)0x68, (byte)0x00,
		(byte)0x00, (byte)0x00, (byte)0x53, (byte)0x00, (byte)0x63, (byte)0x00, (byte)0x72, (byte)0x00,
		(byte)0x6f, (byte)0x00, (byte)0x6c, (byte)0x00, (byte)0x6c, (byte)0x00, (byte)0x20, (byte)0x00,
		(byte)0x45, (byte)0x00, (byte)0x6e, (byte)0x00, (byte)0x64, (byte)0x00, (byte)0x73, (byte)0x00,
		(byte)0x00, (byte)0x00, (byte)0x49, (byte)0x00, (byte)0x74, (byte)0x00, (byte)0x65, (byte)0x00,
		(byte)0x6d, (byte)0x00, (byte)0x20, (byte)0x00, (byte)0x43, (byte)0x00, (byte)0x6c, (byte)0x00,
		(byte)0x69, (byte)0x00, (byte)0x63, (byte)0x00, (byte)0x6b, (byte)0x00, (byte)0x00, (byte)0x00
	};
}
